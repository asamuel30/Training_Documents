
************************
Day 25 : 7th Mar. 2025 
************************
	
	Kubernetes ::
	
	Overview of Kubernetes 
	
	Kubernetes Architecture
	
	Components of Kubernetes Archetecture 
	
	Terminologies/Concepts 
		
	
	Install Kubernetes
	
	Working with Kubernetes 
	
	

	Kubernetes :::
	
		- Is a Open-Source Container Orchestration Tool.
		
		- Ensure High Availability of the Pods/Containers by creating replicas of pods.
		
		- Support Auto-Scaling and Load Balancing 
		
		- Able to handle / provision hugh volumes to execute containerized application services.
		
		- Self-Healing!
		
		- Persistance Volumes 
		
		- Can be used to Deploy the micro-service based applications without any downtime.
		
		
		
	Kubernetes Architecture & its Components :
		
		
		- Kubernetes_Master 								# Used to Schedule the pods for deployment
		
			- Kubernetes_WorkerNodes1,2,3,4,5				# Target Servers (Production Servers)
						
	Terminologies:
		
		Kubernetes Cluster 	# It is a collection of Kubernetes WorkerNodes.
		
	
	Kubernetes Architecture :
	
	Components of Kubernetes Archetecture ::
	
	
		API Server 			# To Receive the request and validate - It acts as an interface between the user and Kubernetes Master	
		
		ETCD 				# Is a data-store maintain the information of kubernetes
							# It acts as a single point of source 
		
		Scheduler 			# Based on the request, it will identify the healthy worknodes of deployment of pods.
		
		Controller Manager 	# To run the pods in its' desired state all the time
		
		Kubelet 			# Is a kubernetes Agent responsible to deploy the pods 
		
		Kube-Proxy			# To set-up the pod networking/Communication
		
		CRI - Container Runtime Interface(Container-D)
		
							# Used to interact with Container Registries and identify the container images for deployment of pods.
							
							
	Terminologies :::
		
		kubectl					# Is command line utility to interact with kubernetes master 
		
		pod						# Atomic unit of task scheduled to run in kubernetes

		Container Image 		# Is a static file that defines the properties and dependencies of application to create a container.
								# Images are Non-Executable
								# Images composed of various Layer of Instructions
							
		Container				# Is an Executable unit of Container Image 
		
		Container Registry		# Is used to manage/save/version control the Container Images
								# DockerHub is one of the Container Registries
								# Create DockerHub Account 
									https://hub.docker.com/
		
		Container Repository	#	It is subset of Container Registry		
		
		Kubernetes Cluster 		# It is a collection of Kubernetes WorkerNodes.
		
	
	Kubernetes Concepts :::
	
		kubectl Commands 
		
		pods 
		
		Pod Networking 
		
		Kubernetes Services 
		
		Controller Object :
			Deployment Controller Object 
			
		Kubernetes Volumes :
			- Hostpath Volume 
		
		Namespaces 
		
		
	Installation and Configuration of Open-Source Kubernetes Master and WorkerNodes ::::
	
	
		- Minikube 		
		
		- Kubeadm (production level) 
		
		
	Installation of Kubernetes using Kubeadm :::	
	
		1. Launch 3 VMs on AWS Cloud (Ubuntu v22.04) --> (1 Master Node, 2 WorkerNodes)
		
		In all the Nodes(i.e., Master Node and WorkerNodes):
		
			2. Allow all traffic for all the nodes - just for this demo
			3. Change the HostName of all the Nodes
			4. Disable swap configuration in all the nodes
			5. Install Docker in all the nodes
			6. Install CRI - 'Container-D' in all the nodes
			7. Install Kubeadm,kubelet,kubectl 
			8. Enable Kubelet	
		   
		Only on Master Node:
		
			9. Execute Kubeadm Init Command 		# To initialize Kubernetes Master Node
			10. Enable user Access to Kubernetes
			11. Install flannel Network plugins for kubeproxy

		Only on WorkerNodes:		
		
			12. Execute Kubeadm Join Command 		# To attach the Worknodes with Kubernetes Master Node.
			

************************
Day 26 : 10th Mar. 2025 
************************

	- Installation and Configuration of Open-Source Kubernetes Master and WorkerNodes ::::
	
	Installation of Kubernetes using Kubeadm :::	
	
		1. Launch 3 VMs on AWS Cloud (Ubuntu v22.04) --> (1 Master Node, 2 WorkerNodes)
		
		In all the Nodes(i.e., Master Node and WorkerNodes):
		
			2. Allow all traffic for all the nodes - just for this demo
			3. Change the HostName of all the Nodes
			4. Disable swap configuration in all the nodes
			5. Install Docker in all the nodes
			6. Install CRI - 'Container-D' in all the nodes
			7. Install Kubeadm,kubelet,kubectl 
			8. Enable Kubelet Agent
		   
		Only on Master Node:
		
			9. Execute Kubeadm Init Command 		# To initialize Kubernetes Master Node
			10. Enable user Access to Kubernetes
			11. Install flannel Network plugins for kubeproxy

		Only on WorkerNodes:		
		
			12. Execute Kubeadm Join Command 		# To attach the Worknodes with Kubernetes Master Node.
			
	
	- Kubernetes Services : 
	
		- ClusterIP Service 		# Default. It is to access pods within the cluster
		
		- NodePort Service 			# To Expose the Pods to Internet
									# NodePorts : 30000 to 32767
									# Using the <External_IP_Address of Node>:<NodePort_Number> Access thru web browser
		
		- LoadBalancer Service 		
						# To Access the Application thru internet - This Service is created at the application level
						# The LoadBalancer is not the Kubernetes Service. It should be procured by the Cloud Service Providers like AWS/Azure/GCP
						# Defined at the Application Level. 
	
			User_Login_Service:
			
				- Front-End Layer 		--> User Interface 		--> img1 --> Pod1
				
				- Application Layer 	--> Business Logic 		--> img2 --> Pod2
				
				- Back-End Layer 		--> Database 			--> img3 --> Pod3
	
	
Pod1.1,Pod1.2,Pod1.3

Pod2.1,Pod2.2,Pod2.3 

Pod3.1,Pod3.2,Pod3.3 



	- Create and Deploy the Pods :
	
		- Create a manifest file -- *.yaml / *.json		- Both are based on Keys:Value pair
		
		- kubectl create/apply -f *.yaml 		# Submit the kubernetes object creation request

	
		
************************
Day 27 : 11th Mar. 2025 
************************
	
	Kubernetes Deployment Controller Object :::
	
	
	Replicaset :::
		--> Replicaset is used to execute the specific no. of pods in the cluster.
		--> Replicaset uses the Set Based Operator
		--> Used to replicate the pods and able to scale up/down
		--> The Replicasets will be automatically created, while creating Deployment Controller Object.
		
		Application_Service ===> 
		
			100 replicas of pods 
	
	Deployment Controller :::
	
		--> It is used to deploy the pods and ensure high availability of pods by creating pod replicas 
		
		--> 1. Create Muliple instance/replicas/copies of pods 
			2. Used to Scale-Up / Scale-Down the Pods 
			3. Used to Upgrade the application pods 
			4. Used to Down-grade/roll-back the application pods
			
		--> The upgrade/down-grade of application pods can be done without any downtime. 
		
		--> To achieve zero-downtime during upgrade/down-grade, By Default, it used Rolling-Update Deployment Strategy.
	
		Rolling-Update Deployment Strategy:::
		
			mywebapp.java_v1.0					mywebapp.war_v1.0				mywebapp_img:v1.0	
	

		replica = 3
	
	mywebapp_img:v1.0	: pod1	--> wn1
	
	mywebapp_img:v1.0	: pod2	--> wn2
	
	mywebapp_img:v1.0	: pod3	--> wn1


			mywebapp.java_v2.0					mywebapp.war_v2.0				mywebapp_img:v2.0	

		replica = 3
		
		
		Rolling-Update Deployment Strategy:::
	
	mywebapp_img:v1.0	: pod1	--> wn1		mywebapp_img:v2.0 --> pod1
		
	mywebapp_img:v1.0	: pod2	--> wn2		mywebapp_img:v2.0 --> pod2
	
	mywebapp_img:v1.0	: pod3	--> wn1		mywebapp_img:v2.0 --> pod3
	
	
		
	Output ::
	
		- Deployment Object 
		
		- Replicaset 
		
		- Pods 
	
	
Kubernetes Volumes :

	--> Persistant Volume
	
	--> Persistant Volume Claim
	
		--> HostPath Volume 
		
		--> config-map Volume 
		
		--> Secret Volume 
		
		
Access Level :

	Namespaces ::
	
		--> Is a logical partition of the Kubernetes Cluster 
	
	Environments :::
	
	
	
	Non-Prod Kubernetes_Cluster(10)														Prod Kubernetes_Cluster
	
		dev - namespace 
		
		qa	- ns 
		
		uat	- ns 																			prod - Active NS(LIVE)
		
	
	devteam1-ns
	
	testteam1-ns

d:/
	
	Folder1 :												NS 
		- file1.txt  -- 5 MB
		
	Folder2 :												NS
		- file1.txt  -- 5 MB
		- file2.txt  -- 5 MB
		
		
		
1. Practise all the Kubernetes Concepts (Deployment Controller Object)

2. Execute Jenkins Pipeline:

	--> SCM-Checkout 
	
	--> Application Build 

3. Using Docker Build Create an Application Image using the Dockerfile present in Workspace 

4. Publish the Image to DockerHub

5. Deploy the Application image in Kubernetes using Pod - Manifest.



	
	docker rmi <image_name>			# Remove Docker Image from local Machine 
	
	docker rm <container_id>		# Removesa Docker Container from local Machine 
