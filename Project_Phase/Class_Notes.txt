************************
Day 32 : 20th Mar. 2025 
************************	

	 : CICD Pipeline Project using Jenkins,Docker,Kubernetes


Application :
		
		- On-board Application Services to DevOps Pipeline --> Automated Build and Deployment in Kubernetes_Cluster.
		
	
	On DevOps Perspectives :
	
		- Detailed DevOps Assessment
		
		- Servers need to implement CICD

		- Tools to be install in all these servers
		
		- Integrate the Servers 
		
		- Create CICD Pipeline Scripts/Templates 
		
		
		- List of Servers(VMs) Needed :::
		- Purpose of the Servers 
		- Tools to be install in all these servers'
		
		- CICD :::
		
		Pipeline Project :::

			Stages :
			
				1. SCM_Checkout 										* Source_Code 
				2. Application Build 									* Build - *.war 
				3. Application Image Build 								* Appimg:v1.0
				4. Push Appimg to DockerHub 							* Image Published to DockerHub
				5. Deploy the Application to Kubernetes_Cluster			* App Deployed to Kubernetes_WorkerNodes
			
				
************************
Day 33 : 21st Mar. 2025 
************************			

- Detailed DevOps Assessment :  - Interact with all the teams and collect the detailed requirements 
		
	Phase 1 :
		-> 	Infra-Structure Provisioning and Configurations 
				- Using Terraform and Ansible 
				- Using AWS Console 
		
	
	Phase 2 :
		-> 	Automation of Application Builds & Deployments  
				- Using Jenkins CICD Pipelines
						- To Automate of Application Builds & Deployments  
		
		
	Phase 3 :
		-> 	Monitoring of Infra-Structure
				- Using Prometheus & Grafana
			
		
	What are the Servers(VM) needed ?
	
	What are the tools to be configured in each server ?
	
	What are the stages of CICD Pipeline ?		
	
	
Implementation Procedures/Steps :::		

	What are the Servers(VM) needed ?
	
		Servers :::
		
			Jenkins_Master										--> # To create CICD Pipeline Jobs and schedule it to run in Slave Nodes
			
				Build_Server-Jenkins_Slave 						--> # Compile the Source Code 
				(Perform Application Build and Docker Build)		# Perform Unit Testing 
																	# Create Artifacts 
																	# Create Application Image 
																	# Publish Application Image to DockerHub Registry
			
			Kubernetes_Master									--> Schedule Pod Deployments 
				Kubernetes_WorkNode1							--> Execute the Pods 
				Kubernetes_WorkNode2							--> Execute the Pods

	
	What are the tools to be configured in each server ?	
	
	
		Jenkins_Master						--->	# jdk, jenkins, git 
			Build_Server-Jenkins_Slave 		--->	# git, jdk, maven, docker
		Kubernetes_Master					---> 	# All Kubernetes Components
			Kubernetes_WorkNode1
			Kubernetes_WorkNode2

		Maintain DockerHub Credentials in the Jenkins Credential Manager 
			goto jenkins dashboard 
				-- Manage Jenkins 
					-- Credential 
						-- using dockerhub username and access token 	
						
						
						
						
						
		
		Integration of Kubernetes Master Node with Jenkins Master Node.
		
			- Using Publish over ssh plugins, integrate Kubernetes_Master Node to Jenkins Master Node
			- And Execute kubectl create command using Publish over ssh plugins
			
			--> 1. Create a devopsadmin - User in Kubernetes_Master
			--> 2. Create SSH Keys to devopsadmin - User
			--> 3. Ensure that devopsadmin - User have access to execute kubectl commands
			--> 4. Use, the Kubernetes - Master Node's - Private IP Address,User_Name and Credential to config in Jenkins - Publish Over SSH
			--> 5. Create a Pipeline Deployment Stage using Publish Over SSH Plugins step
					- To copy the kubernetes manifest file - *.yaml file from jenkins_Slave Node to Kubernetes Master Node.
					- To execute a command : kubectl apply -f kubernetesdeploy.yaml
	
	
	
	What are the stages of CICD Pipeline ?
	
		- SCM Checkout 
		
		- Application Build 
		
		- Application Image Build
		
		- Login to DockerHub 

		- Publish Application Image to DockerHub Container Registry
		
		- Deploy the Application Images to Target Environments(DEV/STAGE/PROD) using Kubernetes
	

	Check list :

		Input Source Code Repository :	<developers provide the Source Code Repository URL>
										https://github.com/PaperLive-DevOps-Jan25/java-webapp-project.git
				
		Firstly, fork the repository and use your own repository in the pipeline	
		
		1. Launch all the Required VMs 					==> AWS AMI - Ubuntu v22.04 - (Create using Terraform/AWS Console)
		2. Ensure all the Required Ports are enabled using Security Group(Inbound Rules)
		3. Install all the Required Tools in each VM 	==> Manual / Ansible Playbooks 
		4. Create User in all the Required VMs with proper ssh keys to enable authentication 
		5. Setup the connection between the servers 
		6. Validate the Connection
		7. Create CICD Pipeline with all these 6 stages 
		8. Validate the CICD Pipeline for Application Build, Docker Images, and Deployments in Kubernetes

		Enhance the project using github webhook(Make the code changes and trigger the build) & Email Notification
		
FROM tomcat:8.0				
COPY target/*.war /usr/local/tomcat/webapps
EXPOSE 8080

#kubedeploy.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: loksai-eta-deploy
  labels:
    app: loksai-eta-deploy-lbl
spec:
  replicas: 2
  selector:
    matchLabels:
      app: loksai-eta-app
  template:
    metadata:
      labels:
        app: loksai-eta-app
    spec:
      containers:
      - name: loksai-eta-container
        image: loksaieta/loksai-eta-app
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: loksai-eta-np-service
  labels:
    app: loksai-eta-app
spec:
  selector:
    app: loksai-eta-deploy-lbl

  type: NodePort
  ports:
  - nodePort: 30001
    port: 8080
    targetPort: 8080
		
pipeline {

    agent { label 'slave1' }


	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerhubcred1')
	}
	
    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/PaperLive-DevOps-Jan25/java-webapp-project.git'
            }
        }
        stage('Application_Build') {
            steps {
                echo 'Perform Maven Build'
				sh 'mvn clean package'
            }
        }
        stage('Build Docker Image') {
            steps {
				sh "docker build -t loksaieta/loksai-eta-app:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/loksai-eta-app:${BUILD_NUMBER} loksaieta/loksai-eta-app:latest"
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/loksai-eta-app:latest"
			}
		}
		stage('Deploy to Kubernetes') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Kubernetes_Master', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'kubectl apply -f kubedeploy.yaml', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}	
            }
		}
    }
}			
		
